image:
  repository: vit0r/uptime-kuma
  pullPolicy: IfNotPresent
  tag: ~
imagePullSecrets: []
nameOverride: "uptime-kuma"
fullnameOverride: "uptime-kuma"
namespaceOverride: "uptime-kuma"
useDeploy: true
serviceAccount:
  create: false
  annotations: {}
  name: ""
podAnnotations: {}
podLabels: {}
podEnv: []
podSecurityContext:
  fsGroup: 65534
securityContext:
  readOnlyRootFilesystem: false
  runAsNonRoot: false
  runAsUser: 65534
  runAsGroup: 65534
service:
  type: ClusterIP
  port: 3001
  nodePort:
  annotations: {}
ingress:
  enabled: true
  className: "nginx"
  extraLabels: {}
  annotations:
    # cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
  hosts:
    - host: uptime.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # tls:
  #   - secretName: uptime-tls
  #     hosts:
  #       - uptime.local
resources:
  limits:
    cpu: 800m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi
nodeSelector: {}
tolerations: []
affinity: {}
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 180
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
  exec:
    command:
      - "extra/healthcheck"
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
  exec:
    command: []
  httpGet:
    path: /
    port: 3001
    scheme: HTTP
    httpHeaders: []
volume:
  enabled: true
  accessMode: ReadWriteOnce
  size: 1Gi
  existingClaim: ""
additionalVolumes:
  []
  # - name: "additional-certificates"
  #   configMap:
  #     name: "additional-certificates"
  #     optional: true
  #     defaultMode: 420
# -- A list of additional volumeMounts to be added to the pod
additionalVolumeMounts:
  []
  # - name: "additional-certificates"
  #   mountPath: "/etc/ssl/certs/additional/additional-ca.pem"
  #   readOnly: true
  #   subPath: "additional-ca.pem"
strategy:
  type: Recreate
serviceMonitor:
  enabled: false
  interval: 60s
  scrapeTimeout: 10s
  scheme: ~
  tlsConfig: {}
  relabelings: []
  metricRelabelings: []
  selector: {}
  namespace: ~
  additionalLabels: {}
  annotations: {}
  # -- BasicAuth credentials for scraping metrics, use API token and any string for username
  # basicAuth:
  #   username: "metrics"
  #   password: ""

# -- Use this option to set a custom DNS policy to the created deployment
dnsPolicy: ""

# -- Use this option to set custom DNS configurations to the created deployment
dnsConfig: {}

# -- Use this option to set custom PriorityClass to the created deployment
# ref: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
priorityClassName: ""

# -- Create a NetworkPolicy
networkPolicy:
  # -- Enable/disable Network Policy
  enabled: false
  # -- Enable/disable Ingress policy type
  ingress: true
  # -- Enable/disable Egress policy type
  egress: true
  # -- Allow incoming connections only from specific Pods
  # When set to true, the geoserver will accept connections from any source.
  # When false, only Pods with the label {{ include "geoserver.fullname" . }}-client=true will have network access
  allowExternal: true
  # -- Selects particular namespaces for which all Pods are allowed as ingress sources
  namespaceSelector: {}
  #  matchLabels:
  #    role: frontend
  #  matchExpressions:
  #   - {key: role, operator: In, values: [frontend]}
